####################################################################################################
#   CHARACTERS AND DIGITS                                                                          #
####################################################################################################
a-m               = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
A-M               = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
n-z               = "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
N-Z               = "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
LOWER-LETTER      = a-m | n-z
UPPER-LETTER      = A-M | N-Z
LETTER            = LOWER-LETTER | UPPER-LETTER
NONZERO-DIGIT     = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
DIGIT             = "0" | NONZERO-DIGIT

####################################################################################################
#   INDENTATION AND KEYWORDS                                                                       #
####################################################################################################
INDENT      = "    "
DEF         = "def"
LOGICAL-AND = "and"
LOGICAL-OR  = "or"
LOGICAL-NOT = "not"
RETURN      = "return"
STRUCT      = "struct"
KEYWORDS    = DEF | LOGICAL-OR | RETURN | STRUCT

####################################################################################################
#   CONSTANTS                                                                                      #
####################################################################################################
bool-value = "false" | "true"

natural-number = NONZERO-DIGIT , { DIGIT }
dec-number     = "0" | [ "-" ] , natural-number

####################################################################################################
#   IDENTIFIERS                                                                                    #
####################################################################################################
variable-segment    = LOWER-LETTER | DIGIT
variable-tail       = variable-segment , "_" , variable-tail | variable-segment
variable-identifier = LOWER-LETTER , [ variable-tail ]

type-tail       = LETTER | DIGIT
type-identifier = UPPER-LETTER , { type-tail }

####################################################################################################
#   DECLARATIONS                                                                                   #
####################################################################################################
variable-declaration = variable-identifier , ": " , type-identifier

struct-signature   = STRUCT , " " , type-identifier , ":" , $
struct-field       = INDENT , variable-declaration , $
struct-body        = struct-field , [ struct-body ]
struct-declaration = struct-signature , struct-body

parameter-list       = variable-declaration , ", " , parameter-list | variable-declaration
function-signature   = DEF , " " , type-identifier , "(" , [ parameter-list ] , ") -> " , type-identifier , ":" , $
function-statement   = INDENT , statement , [ function-statement ] | INDENT , RETURN , " " , variable-identifier
function-declaration = function-signature , function-statement

declaration = variable-declaration | struct-declaration | function-declaration

####################################################################################################
#   ASSIGNMENTS                                                                                    #
####################################################################################################
or-expression      = and-result , " " , LOGICAL-OR , " " , or-result
or-result          = or-expression | and-result
and-expression     = logical-atom , " " , LOGICAL-AND , " " , and-result
and-result         = and-expression | logical-atom
logical-atom       = "(" , logical-expression , ")" | LOGICAL-NOT , " " , logical-atom | variable-identifier | bool-value
logical-expression = or-expression | and-expression

lvalue     = variable-identifier | variable-declaration
rvalue     = function-call | logical-expression | logical-atom | arithmetical-expression | arithmetical-atom
assignment = lvalue , " = " , rvalue , $

####################################################################################################
#   STATEMENTS                                                                                     #
####################################################################################################
statement      = declaration | assignment
statement-list = statement , $ , [ statement-list ]
